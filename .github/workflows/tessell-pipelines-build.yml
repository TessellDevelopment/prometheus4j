---
name: Tessell Pipelines Code Build

on:
  push:
    branches:
      - 'main'
      - 'rel-*'
      - 'TS-*' 
      - 'SRE-*'
      - 'TDEVOPS-*'
      - 'revert-*'

  workflow_dispatch:

jobs:
  gradle-build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL  }}
      NEXUS_PULL_REPOS_M2: tessell-m2-development
      NEXUS_PUSH_REPOS_M2: tessell-repos-m2-component
    steps:
      - uses: actions/checkout@v3

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Set Pull repository
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        shell: bash
        run: |
          echo "NEXUS_PULL_REPOS_M2=tessell-m2-component" >> $GITHUB_ENV

      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        if: ${{ !startsWith(env.SOURCE_BRANCH,'rel-') && env.SOURCE_BRANCH != 'main' }}
        run: |
          ./gradlew build --console plain \
            -Pnexus_push_username="${{ secrets.CIPIPELINE_GITHUB_USER }}" \
            -Pnexus_push_password="${{ secrets.CIPIPELINE_GITHUB_TOKEN }}" \
            -Pnexus_username="${{ secrets.CIPIPELINE_GITHUB_USER }}" \
            -Pnexus_password="${{ secrets.CIPIPELINE_GITHUB_TOKEN }}"
        shell: bash

      - name: Build and Push with Gradle
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        run: |
          VERSION=$(yq '.version' convoy.yaml)
          ./gradlew publish --console plain  \
            -Pnexus_push_username="${{ secrets.CIPIPELINE_GITHUB_USER }}" \
            -Pnexus_push_password="${{ secrets.CIPIPELINE_GITHUB_TOKEN }}" \
            -Pnexus_username="${{ secrets.CIPIPELINE_GITHUB_USER }}" \
            -Pnexus_password="${{ secrets.CIPIPELINE_GITHUB_TOKEN }}" \
            -Pnexus_push_repo_m2="${{ env.NEXUS_PUSH_REPOS_M2 }}" \
            -Pnexus_pull_repo_m2="${{ env.NEXUS_PULL_REPOS_M2 }}" \
            -Pversion=$VERSION
        shell: bash

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        if: ${{ failure() && (startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main') }}
        with:
           status: ${{ job.status }}
           steps: ${{ toJson(steps) }}
           channel: ${{ secrets.SLACK_DEVOPS_CHANNEL  }}

  post-build-status-to-convoy:
    runs-on: ubuntu-latest
    needs: gradle-build
    if: always()  
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.CONVOY_ALERTS_SLACK_URL }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Get branch name
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pybase64

      - uses: technote-space/workflow-conclusion-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}

      - name: POST API to Convoy
        if: ${{ startsWith(env.SOURCE_BRANCH,'rel-') || env.SOURCE_BRANCH == 'main' }}
        env:
          API_URL: http://api.convoy.tessell.cloud/devops/git-metadata/build-status
          COMMIT_HASH: "${{github.sha}}"
          REPO: "${{github.repository}}"
          BASE_BRANCH: "${{github.event.pull_request.base.ref}}"
          GITHUB_TOKEN: ${{ secrets.CIPIPELINE_GITHUB_TOKEN }}
          USER: ${{secrets.CIPIPELINE_GITHUB_USER}}
          STATUS: "${{env.WORKFLOW_CONCLUSION}}"
          SOURCE_BRANCH: "${{env.SOURCE_BRANCH}}"
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import time
          import base64
          import yaml

          API_URL = os.environ.get('API_URL')
          REPO = os.environ.get('REPO')
          COMMIT_HASH = os.environ.get('COMMIT_HASH')
          BASE_BRANCH = os.environ.get('BASE_BRANCH')
          STATUS = (os.environ.get('STATUS')).upper()
          CONVOY_AUTH_TOKEN = os.environ.get('USER')+':'+ os.environ.get('GITHUB_TOKEN')
          CONVOY_AUTH_TOKEN = base64.b64encode(CONVOY_AUTH_TOKEN.encode('utf-8')).decode('utf-8')
          
          if not(bool(BASE_BRANCH)):
            BASE_BRANCH = os.environ.get('SOURCE_BRANCH')
          
          OWNER = REPO.split("/")
          REPO = OWNER[1]
          
          if STATUS == 'SUCCESS':
            STATUS = 'SUCCESSFUL'
          if STATUS == 'FAILURE':
            STATUS = 'FAILED'

          with open('convoy.yaml', 'r') as yaml_file:
            yaml_data = yaml.safe_load(yaml_file)
          APP_GROUP = yaml_data.get('appGroup')
          payload = {
            "repoName": REPO,
            "appGroup": APP_GROUP,
            "commitHash": COMMIT_HASH[:7],
            "baseBranch": BASE_BRANCH,
            "buildStatus": STATUS
          }
          print(payload)
          headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Basic {CONVOY_AUTH_TOKEN}'
          }

          max_retries = 3
          retry_delay = 20 
      
          for _ in range(max_retries):
              response = requests.post(API_URL, json=payload, headers=headers)
              if response.status_code == 200:
                  print(response.status_code)
                  print(response.text)
                  break
              else:
                  print(response.status_code)
                  print(response.text)
                  print(f"Retrying... ({max_retries - _} attempts left)")
                  time.sleep(retry_delay)
          else:
              print("API request failed after retries.")
              exit(1)
          print("POST request Complete")
          EOF

      - name: Slack Notification
        uses: act10ns/slack@v1.5.0
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            channel: ${{ secrets.CONVOY_ALERTS_SLACK_CHANNEL  }}
        if: failure()
