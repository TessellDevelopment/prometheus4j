---
name: Best Practices Check

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - 'main'
      - 'rel-*'
      - 'TS-*' 
      - 'TDEVOPS-*'
      - 'revert-*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  dev-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          fetch-depth: 0

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }} | tr / -)" >> $GITHUB_ENV
          echo "TARGET_BRANCH=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}" >> $GITHUB_ENV
      
      - name: Check Format
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^revert-'; then
              echo "Revert branch, skipping Format check"
              exit 0
          fi
          if echo "${{ env.SOURCE_BRANCH }}" | grep -Eq '^(TS-|SRE-|TDEVOPS-|TOPS-)'; then
            echo "Branch name starts with 'TS-' or 'SRE-' or 'TDEVOPS-' or 'TOPS-'"
          else
            echo "Branch name does not start with 'TS-' or 'SRE-' or 'TDEVOPS-' or 'TOPS-'. Checking PR title format."
            PULL_REQUEST_TITLE="$PR_TITLE"
            PATTERN="(TS|TDEVOPS|TOPS|SRE)-[0-9]+\s\|\s"
            if [[ ! $PULL_REQUEST_TITLE =~ $PATTERN ]]; then
              echo "Error: Pull request title is not in the required format. Please use 'TS-XXXX | --' or 'TDEVOPS-XXXX | --' or 'TOPS-XXXX | --' or 'SRE-XXXX | --' format."
              exit 1
            else 
              echo "PR Title is in the valid format."
            fi  
          fi

      - name: Check convoy.yaml
        id: convoy_check
        run: |
          if [ -f "convoy.yaml" ]; then
            echo "convoy_exists=true" >> $GITHUB_OUTPUT
          else
            echo "convoy_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install shyaml
          echo ${{steps.convoy_check.outputs.convoy_exists}}

      - name: Check double commit
        env: 
          PR_TITLE: ${{github.event.pull_request.title}}
          BRANCH: ${{ github.event.pull_request.head.ref}}
        run: |
          if ([[ '${{ github.event.pull_request.user.login }}' != 'cipipelinetessell' ]]) && ([[ "$BRANCH" == *"double_commit"* ]] || [[ "$PR_TITLE" == *"Double Commit"* ]]); then
            if ([[ "$BRANCH" == *"revert"* ]] && [[ "$PR_TITLE" == *"Revert"* ]]); then
              echo "Revert Double commit Branch. Allowed"
            else   
              echo "Exclude Double commit naming in Branch, PR title and try again."
              exit 1
            fi
          else
            echo "No double commit conflicts found in Branch or PR title."
          fi

      - name: import packages for json lint
        run: |
          sudo sudo npm install jsonlint -g
          
      - name: Check for Jsonlint
        run: |
          set -e
          git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.json$' | xargs -I{} sh -c 'jsonlint -q "{}" || { echo "::error::Invalid JSON file: {}"; exit 1; }'

      - name: Install dependencies
        run: npm install node-fetch js-yaml @octokit/rest --legacy-peer-deps

      - name: Check for merge conflicts
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            response.data.files.forEach(function(file_entry) {
              console.log(file_entry.filename);
              dir_name = file_entry.filename.split("/")[0];
              console.log(file_entry.patch);
              if(typeof file_entry.patch !== 'undefined'){
                if ( file_entry.patch.includes("+<<<<<<<") || file_entry.patch.includes("+=======") || file_entry.patch.includes("+>>>>>>>")) {
                  core.setFailed("Please resolve Merge Conflict in: " + dir_name );  
                }
              }
              else{
                console.log("Skipping:" + file_entry.filename);
              }
            });
            console.log("No merge conflicts found"); 
            
      - name: Check version in convoy.yaml and gradle.properties
        id: check_convoy
        run: |
            if [ -f convoy.yaml ]; then
              if grep -q 'version:' convoy.yaml; then
                echo "Version found in convoy.yaml"
                
                if [ -f gradle.properties ]; then
                  if grep -q '^\s*version=' gradle.properties; then
                    echo "Please remove version from gradle.properties"
                    exit 1
                  else
                    echo "check_version_in_gradle=true" >> $GITHUB_OUTPUT
                  fi
                fi
              else
                echo "Version not found in convoy.yaml"
                echo "check_version_in_gradle=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "convoy.yaml not found"
              echo "check_version_in_gradle=false" >> $GITHUB_OUTPUT
            fi
            
      - name: check for gradle properties version
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            version_updated = false
             response.data.files.forEach(function(file_entry) {
               if (file_entry.filename == 'convoy.yaml') {
                   console.log(file_entry.patch)
                   if (file_entry.patch.includes("-version:") && file_entry.patch.includes("+version:")) {
                       version_updated = true
                   }
               }
             });
             if (version_updated == false) {
                  core.setFailed("Tessell Libraries must update the version in gradle.properties file")
             }

      - name: check for terraform (code)
        if : github.event_name == 'pull_request'
        id: terraform_check
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.CIPIPELINE_NEXUS_PASSWORD  }}
          script: |
            head_commit = "${{ github.sha }}"
            base_commit = "${{ github.sha }}"
            if ( "${{ github.event.before }}" != '0000000000000000000000000000000000000000') { 
              base_commit = "${{ github.event.before }}"
            }
            if ( "${{ github.event_name }}" == 'pull_request') {
              console.log("Using the base branch's commit for comparing.")
              base_commit = "${{ github.event.pull_request.base.sha  }}"
            }
            console.log("base_commit " + base_commit);
            console.log("head_commit " + head_commit); 
            response = await github.rest.repos.compareCommits({
                owner: "${{ github.repository_owner }}",
                repo: "${{  github.repository }}".split('/')[1],
                head: head_commit,
                base: base_commit
            });
            var terraform_file = [] 
            response.data.files.forEach(function(file_entry) {
              if (file_entry.filename.endsWith(".tf") && file_entry.status != 'removed') {
                console.log(file_entry.filename);
                console.log(file_entry.status);
                terraform_file.push(file_entry.filename)
                console.log(terraform_file) ;
              }
            });
            core.setOutput('terraform_file' , terraform_file.join(','));


      - name: Check Version sequence of DB Scripts
        id: check_db_version_seq
        if: steps.check_db_migration.outputs.db_migration_dir
        run:
          python3 .github/scripts/check_db_migration_version_sequence.py "${{ steps.check_db_migration.outputs.db_migration_dir }}"      
      

      - name: check for terraform version
        if: steps.terraform_check.outputs.terraform_file 
        run:
          terraform_version_check "${{ steps.terraform_check.outputs.terraform_file }}"
      
      - name: check to verify same branch is exist
        if: ${{ startsWith(env.TARGET_BRANCH,'rel-') && !contains(env.SOURCE_BRANCH,'double_commit') }}
        run: |
          branch_to_check=${{ env.SOURCE_BRANCH }}-main-double_commit
          list_of_branches=($(git branch -r | awk -F '/' '{print $2}'))
          for branch in "${list_of_branches[@]}";do
          if [[ "$branch" == "$branch_to_check" ]];then
            echo "Double commit branch with name $branch is alredy exist , please merge and/or delete  the branch ";exit 1;
          fi
          done
             
